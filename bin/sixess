#!/bin/bash
set -e

EXE=$(basename $0)
BINDIR=$(dirname $(readlink -f $0))
DATABASE=$(readlink -f "$BINDIR/../db/RDP/RDP")
THREADS=1
QUIET=0

#............................................................................
# Reusable functions

function msg {
  if [ ! "$QUIET" ]; then
    echo -e "$*" 1>&2
  fi
}

function err {
  #echo "ERROR: $*" 1>&2
  msg "ERROR: $*"
  exit 1
}

function exitOnFailure {
  if [ $1 -ne 0 ]; then
    err "$2 failed to run (errorcode=$1)"
  fi
}

function banner {
  HBAR="--------------------------------------------------------------------"
  msg "$HBAR\n$*\n$HBAR"
}

function usage {
  msg "Name:\n  $EXE - rapid 16s identification from isolate FASTQ"
  msg "Author:\n  Torsten Seemann"
  msg "Usage:\n  $EXE [options] <reads>"
  msg "Parameters:"
  msg "  <reads>     Genomic sequencing reads: {fq,fa}[.gz]"
  msg "Options:"
  msg "  -h          Show this help"
  msg "  -q          Quiet mode, don't output to stderr ($QUIET)"
  msg "  -d          Database ($DATABASE)"
  msg "  -t          CPU threads ($THREADS)"
  exit 1 
}

#...........................................................................
# Parse the command line options

while getopts 'hd:t:q' opt ; do
  case $opt in
    h)
      usage
      ;;
    q)
      QUIET=1
      ;;
    d)
      DATABASE=$OPTARG
      ;;
    t)
      THREADS=$OPTARG
      ;;
  esac
done

# skip over out options
shift $((OPTIND-1))

# read our mandatory positional parameters

if [ $# -lt 1 ]; then
  usage
fi

#............................................................................
banner "Checking command line parameters"

if [ "$THREADS" -eq "0" ]; then
  THREADS=$(getconf _NPROCESSORS_ONLN)
  msg "Auto-detected $THREADS threads"
fi

[ ! -r "$DATABASE" ] && err "Can not read FASTA database: $DATABASE"

READFILE="$(readlink -f "$1")"
[ ! -r "$READFILE" ] && err "Can not read first FASTQ file: $READFILE"
READS="$*"

msg "Reads: $READS"
msg "Database: $DATABASE"

#............................................................................
banner "Checking external dependencies"

for EXE in minimap2 sort uniq cut head sed; do
  WHERE=$(which $EXE)
  if [ "$WHERE" != "" ]; then
    msg "Checking for $EXE - found $WHERE"
  else
    err "Could not find the required '$EXE' command"
  fi
done

#............................................................................
banner "Mapping reads to $DATABASE"

ACC=$(minimap2 -t 8 -x sr "$DATABASE" $READS 2> /dev/null \
      | cut -f 6 | sort | uniq -c | sort -nr \
      | head -n 1 | sed 's/^.*S/S/')
msg "Top hit: $ACC"
      
HIT=$(grep -h -F "$ACC" "$DATABASE")
msg "Description: $HIT"

BINOMIAL=$(echo "$HIT" | cut -d ' ' -f 2,3)
msg "Species: $BINOMIAL"

#............................................................................
banner "Done."

echo "$BINOMIAL"



