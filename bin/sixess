#!/bin/bash
set -e

EXE=$(basename $0)
BINDIR=$(dirname $(readlink -f $0))
DATABASE="$BINDIR/../db/RDP/RDP"
FORCE=0
CUTOFF=3
KMER=31
THREADS=1
RETAIN=0

#............................................................................
# Reusable functions

function banner {
  HBAR="--------------------------------------------------------------------"
  echo -e "$HBAR\n$*\n$HBAR" 1>&2
}

function msg {
  echo -e "$*" 1>&2
}

function err {
  echo "ERROR: $*" 1>&2
  exit 1
}

function exitOnFailure {
  if [ $1 -ne 0 ]; then
    err "$2 failed to run (errorcode=$1)"
  fi
}

function usage {
  msg "Name:\n  $EXE - rapid 16s identification from isolate FASTQ"
  msg "Author:\n  Torsten Seemann <torsten.seemann@gmail.com>"
  msg "Usage:\n  $EXE [options] <outdir> <reads ...>"
  msg "Parameters:"
  msg "  <outdir>    Output folder"
  msg "  <reads>     Genomic sequencing reads (FASTQ[.gz])"
  msg "Options:"
  msg "  -h          Show this help"
  msg "  -d          Database ($DATABASE)"
  msg "  -t          CPU threads ($THREADS)"
  msg "  -k          Assembly kmer ($KMER)"
  msg "  -c          Assembly coverage cutoff ($CUTOFF)"
  msg "  -f          Force overwrite of <outdir>"
  msg "  -r          Retain intermediate files in <outdir>"
  exit 1 
}

#...........................................................................
# Parse the command line options

while getopts 'hfrc:k:d:t:' opt ; do
  case $opt in
    h)
      usage
      ;;
    f)
      FORCE=1
      ;;    
    r)
      RETAIN=1
      ;;    
    d)
      DATABASE=$OPTARG
      ;;
    c)
      CUTOFF=$OPTARG
      ;;
    k)
      KMER=$OPTARG
      ;;
    t)
      THREADS=$OPTARG
      ;;
  esac
done

# skip over out options
shift $((OPTIND-1))

# read our mandatory positional parameters

if [ $# -lt 2 ]; then
  usage
fi

#............................................................................
banner "Checking command line parameters"

if [ "$THREADS" -eq "0" ]; then
  THREADS=$(getconf _NPROCESSORS_ONLN)
  msg "Auto-detected $THREADS threads"
fi

[ ! -r "$DATABASE" ] && err "Can not read FASTA database: $DATABASE"

[ ! -r "$DATABASE.nin" ] && err "Can not read BLASTN database: $DATABASE.nin"

OUTDIR="$(readlink -f "$1")"
[ -d "$OUTDIR" -a "$FORCE" -eq "0" ] && err "Output folder already exists: $OUTDIR"
shift

FASTQ="$(readlink -f "$1")"
[ ! -r "$FASTQ" ] && err "Can not read first FASTQ file: $FASTQ"
READS="$*"

msg "Output folder: $OUTDIR"
msg "Reads: $*"
msg "Database: $DATABASE"
msg "Retain: $RETAIN"
msg "Coverage: $CUTOFF"
msg "Kmer: $KMER"

#............................................................................
banner "Checking external dependencies"

#for EXE in gzip grep sort uniq head tail eqtk megahit velveth velvetg minimap blastn blast_formatter ; do
for EXE in gzip grep sort uniq head tail seqtk infoseq sizeseq megahit blastn blast_formatter ; do
  WHERE=$(which $EXE)
  if [ "$WHERE" != "" ]; then
    msg "Checking for $EXE - found $WHERE"
  else
    err "Could not find the required '$EXE' command"
  fi
done

#............................................................................
banner "Making output folder: $OUTDIR"

mkdir -v -p "$OUTDIR"
exitOnFailure $? "mkdir"

#............................................................................
banner "Mapping reads to $DATABASE"

READIDS="$OUTDIR/reads.ids"
cat $READS | minimap -S -t "$THREADS" "$DATABASE" - \
	| cut -f1 | sort | uniq > "$READIDS" 
NREADS=$(cat "$READIDS" | wc -l)
msg "Found $NREADS reads matching 16s rRNA sequence"
[ "$NREADS" -eq "0" ] && err "No 16s reads found!"

#............................................................................
banner "Extracting mapped reads"

FASTQ="$OUTDIR/reads.fq"
rm -f "$FASTQ"
for R in $READS ; do
  msg "Processing: $R $READIDS"
  seqtk subseq "$R" "$READIDS" >> "$FASTQ"
done
msg "Stats:"
seqtk fqchk "$FASTQ" | head -n 3

#............................................................................
banner "Assembling reads with velvet K=$KMER C=$CUTOFF"

if [ "0" -ne "0" ]; then
VDIR="$OUTDIR/velvet"
velveth "$VDIR" "$KMER" -short -fastq "$FASTQ"
exitOnFailure $? "velveth"
velvetg "$VDIR" -cov_cutoff "$CUTOFF" -very_clean yes > "$VDIR/velvetg.log"
exitOnFailure $? "velvetg"
msg $(grep "^Final" "$VDIR/velvetg.log")
CONTIGS="$MHDIR/contigs.fa"
else
  msg "Skipping."
fi

#............................................................................
banner "Assembling reads with MEGAHIT"

MHDIR="$OUTDIR/megahit"
megahit -r "$FASTQ" -t "$THREADS" -o "$MHDIR" -f 2> /dev/null
exitOnFailure $? "megahit"
CONTIGS="$MHDIR/final.contigs.fa"
msg $(tail "$MHDIR/log" | grep 'STAT')

#............................................................................
banner "Assembling reads with SPADES"

if [ "0" -ne "0" ]; then
SDIR="$OUTDIR/spades"
spades.py -s "$FASTQ" -t "$THREADS" -o "$SDIR" --careful --disable-rr
exitOnFailure $? "spades"
CONTIGS="$SDIR/contigs.fasta"
else
  msg "Skipping."
fi

#............................................................................
banner "Sorting contigs to get longest one"

[ ! -r "$CONTIGS" ] && err "Can not see '$CONTIGS' - assembly failed?"
GENE="$OUTDIR/contigs.fasta"
sizeseq -auto -filter -descending Y < "$CONTIGS" \
	| seqret -auto -filter -firstonly > "$GENE"
infoseq -auto -filter < "$GENE"

#............................................................................
banner "BLAST result against $DATABASE"

BLS="$OUTDIR/contigs.bls"
blastn -query "$GENE" -db "$DATABASE" \
	-evalue 1E-9 -dust no -num_threads "$THREADS" \
	-out "$BLS" -outfmt 11 -perc_identity 99 -task blastn
exitOnFailure $? "blastn"
msg "Wrote blast archive result to: $BLS"

#............................................................................
banner "Prediction"

PRED="$OUTDIR/species.txt"
blast_formatter -archive "$BLS" -outfmt 0 | grep -m 1 -A 6 '^>' > "$PRED"
exitOnFailure $? "blast_formatter"
cat "$PRED"

#............................................................................
banner "Clean up"

if [ "$RETAIN" -eq "0" ]; then
  msg "Removing temporary files"
  rm -fr "$OUTDIR"/{velvet,spades,megahit} "$OUTDIR"/reads.{ids,fq}
else
  msg "Keeping all files in $OUTDIR"
fi  

#............................................................................
banner "Finished"
msg "Results in: $PRED"
head -n 1 "$PRED"
